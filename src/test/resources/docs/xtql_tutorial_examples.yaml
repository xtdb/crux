bo-json-1: |
  // tag::bo-json-1[]
  {
    "from": "users",
    "bind": [ { "xt/id": "user-id" }, "first-name", "last-name" ]
  }
  // end::bo-json-1[]
bo-sql-1: |
  -- tag::bo-sql-1[]
  SELECT users.xt$id AS user_id, users.first_name, users.last_name FROM users
  -- end::bo-sql-1[]

bo-json-2: |
  // tag::bo-json-2[]
  {
    "from": "users",
    "bind": [ { "xt/id": { "@value": "ivan" } }, "first-name", "last-name" ]
  }
  // end::bo-json-2[]
bo-sql-2: |
  -- tag::bo-sql-2[]
  SELECT users.first_name, users.last_name FROM users WHERE users.xt$id = 'ivan'
  -- end::bo-sql-2[]

bo-json-3: |
  // tag::bo-json-3[]
  [
    {
      "from": "users",
      "bind": [{ "xt/id": "user-id" }, "first-name", "last-name"]
    },
    { "orderBy": ["last-name", "first-name"] },
    { "limit": 10 }
  ]
  // end::bo-json-3[]
bo-sql-3: |
  -- tag::bo-sql-3[]
  SELECT users.xt$id AS user_id, users.first_name, users.last_name
  FROM users
  ORDER BY last_name, first_name
  LIMIT 10
  -- end::bo-sql-3[]

joins-json-1: |
  // tag::joins-json-1[]
  {
    "unify": [
      {
        "from": "users",
        "bind": [ { "xt/id": "user-id" }, "first-name", "last-name" ]
      },
      {
        "from": "articles",
        "bind": [ { "author-id": "user-id" }, "title", "content" ]
      }
    ]
  }
  // end::joins-json-1[]
joins-sql-1: |
  -- tag::joins-sql-1[]
  SELECT u.xt$id AS user_id, u.first_name, u.last_name, a.title, a.content
  FROM users u JOIN articles a ON u.xt$id = a.author_id
  -- end::joins-sql-1[]

joins-json-2: |
  // tag::joins-json-2[]
  {
    "unify": [
      {
        "from": "users",
        "bind": [ { "xt/id": "uid1" }, "age" ]
      },
      {
        "from": "users",
        "bind": [ { "xt/id": "uid2" }, "age" ]
      },
      {
        "where": [ { "<>": [ "uid1", "uid2" ] } ]
      }
    ]
  }
  // end::joins-json-2[]
joins-sql-2: |
  -- tag::joins-sql-2[]
  SELECT u1.xt$id AS uid1, u2.xt$id AS uid2, u1.age
  FROM users u1
    JOIN users u2 ON (u1.age = u2.age)
  WHERE u1.xt$id <> u2.xt$id
  -- end::joins-sql-2[]

joins-json-3: |
  // tag::joins-json-3[]
  [
    {
      "unify": [
        {
          "from": "customers",
          "bind": [{ "xt/id": "cid" }]
        },
        {
          "leftJoin": {
            "from": "orders",
            "bind": [{ "xt/id": "oid", "customer-id": "cid" }, "currency", "order-value"]
          },
          "bind": ["cid", "currency", "order-value"]
        }
      ]
    },
    { "limit": 100 }
  ]
  // end::joins-json-3[]
joins-sql-3: |
  -- tag::joins-sql-3[]
  SELECT c.xt$id AS cid, o.currency, o.order_value
  FROM customers c
    LEFT JOIN orders o ON (c.xt$id = o.customer_id)
  LIMIT 100
  -- end::joins-sql-3[]

joins-json-4: |
  // tag::joins-json-4[]
  [
    {
      "unify": [
        {
          "from": "customers",
          "bind": [{ "xt/id": "cid" }]
        },
        {
          "where": [
            {
              "not": [
                {
                  "exists": {
                    "from": "orders",
                    "bind": [ { "customer-id": "$cid" } ]
                  },
                  "args": [ "cid" ]
                }
              ]
            }
          ]
        }
      ]
    },
    { "limit": 100 }
  ]
  // end::joins-json-4[]
joins-sql-4: |
  -- tag::joins-sql-4[]
  SELECT c.xt$id AS cid
  FROM customers c
  WHERE c.xt$id NOT IN (SELECT orders.customer_id FROM orders)
  LIMIT 100
  -- end::joins-sql-4[]

proj-json-1: |
  // tag::proj-json-1[]
  [
    {
      "from": "users",
      "bind": ["first-name", "last-name"]
    },
    {
      "with": [
        {
          "full-name": {
            "concat": ["first-name", { "@value": " " }, "last-name"]
          }
        }
      ]
    }
  ]
  // end::proj-json-1[]
proj-sql-1: |
  -- tag::proj-sql-1[]
  SELECT u.first_name, u.last_name, (u.first_name || ' ' || u.last_name) AS full_name
  FROM users AS u
  -- end::proj-sql-1[]

proj-json-2: |
  // tag::proj-json-2[]
  [
    {
      "unify": [
        {
          "from": "users",
          "bind": [ { "xt/id": "user-id" }, "first-name", "last-name" ]
        },
        {
          "from": "articles",
          "bind": [ { "author-id": "user-id" }, "title", "content" ]
        }
      ]
    },
    {
      "return": [
        {
          "full-name": {
            "concat": [ "first-name", { "@value": " " }, "last-name" ]
          }
        },
        "title",
        "content"
      ]
    }
  ]
  // end::proj-json-2[]
proj-sql-2: |
  -- tag::proj-sql-2[]
  SELECT (u.first_name || ' ' || u.last_name) AS full_name, a.title, a.content
  FROM users AS u
    JOIN articles a ON u.xt$id = a.author_id
  -- end::proj-sql-2[]

proj-json-3: |
  // tag::proj-json-3[]
  [
    {
      "unify": [
        {
          "from": "users",
          "bind": [ { "xt/id": "user-id" }, "first-name", "last-name" ]
        },
        {
          "from": "articles",
          "bind": [ { "author-id": "user-id" }, "title", "content" ]
        }
      ]
    },
    { "without": [ "user-id" ] }
  ]
  // end::proj-json-3[]
proj-sql-3: |
  -- tag::proj-sql-3[]
  SELECT u.first_name, u.last_name, a.title, a.content
  FROM users AS u
    JOIN articles a ON u.xt$id = a.author_id
  -- end::proj-sql-3[]

aggr-json-1: |
  // tag::aggr-json-1[]
  [
    {
      "unify": [
        {
          "from": "customers",
          "bind": [ { "xt/id": "cid" } ]
        },
        {
          "leftJoin": {
            "from": "orders",
            "bind": [ { "xt/id": "oid", "customer-id": "cid" }, "currency", "order-value" ]
          },
          "bind": [ "oid", "cid", "currency", "order-value" ]
        }
      ]
    },
    {
      "aggregate": [
        { "cid": "cid" },
        { "currency": "currency" },
        { "order-count": { "count": ["oid"] } },
        { "total-value": { "sum": [ "order-value" ] } }
      ]
    },
    { 
       "with": [
         {
           "total-value": {
             "coalesce": ["total-value", 0]
           }
         }
       ]
    },
    { "orderBy": [ { "val": "total-value", "dir": "desc" } ] },
    { "limit": 100 }
  ]
  // end::aggr-json-1[]
aggr-sql-1: |
  -- tag::aggr-sql-1[]
  SELECT c.xt$id AS cid, o.currency, COUNT(o.xt$id) AS order_count, COALESCE(SUM(o.order_value), 0) AS total_value
  FROM customers c
    LEFT JOIN orders o ON (c.xt$id = o.customer_id)
  GROUP BY c.xt$id, o.currency
  ORDER BY total_value DESC
  LIMIT 100
  -- end::aggr-sql-1[]

pull-json-1: |
  // tag::pull-json-1[]
  [
    {
      "from": "articles",
      "bind": [{ "xt/id": "article-id" }, "title", "content", "author-id"]
    },
    {
      "with": [
        {
          "author": {
            "pull": [
              {
                "from": "authors",
                "bind": [{ "xt/id": "$author-id" }, "first-name", "last-name"]
              }
            ],
            "args": ["author-id"]
          },
          "comments": {
            "pullMany": [
              {
                "from": "comments",
                "bind": [{"article-id": "$article-id"}, "created-at", "comment"]
              },
              { "orderBy": [{ "val": "created-at", "dir": "desc" }] },
              { "limit": 10 }
            ],
            "args": ["article-id"]
          }
        }
      ]
    }
  ]
  // end::pull-json-1[]

bitemp-json-1: |
  // tag::bitemp-json-1[]
  {
    "from": "users",
    "forValidTime": { "at": { "@value": "2020-01-01", "@type": "xt:date" } },
    "bind": [ "first-name", "last-name" ]
  }
  // end::bitemp-json-1[]
bitemp-json-2: |
  // tag::bitemp-json-2[]
  {
    "from": "users",
    "forValidTime": "allTime",
    "bind": [ "first-name", "last-name" ]
  }
  // end::bitemp-json-2[]

bitemp-sql-1: |
  -- tag::bitemp-sql-1[]
  SELECT users.first_name, users.last_name FROM users FOR VALID_TIME AS OF DATE '2020-01-01'
  -- end::bitemp-sql-1[]
bitemp-sql-2: |
  -- tag::bitemp-sql-2[]
  SELECT users.first_name, users.last_name FROM users FOR ALL VALID_TIME
  -- end::bitemp-sql-2[]

bitemp-json-3: |
  // tag::bitemp-json-3[]
  {
    "unify": [
      {
        "from": "users",
        "forValidTime": { "at": { "@value": "2018-01-01", "@type": "xt:date" } },
        "bind": [ { "xt/id": "user-id"} ]
      },
      {
        "from": "users",
        "forValidTime": { "at": { "@value": "2023-01-01", "@type": "xt:date" } },
        "bind": [ { "xt/id": "user-id" } ]
      }
    ]
  }
  // end::bitemp-json-3[]

DML-Insert-sql: |
  -- tag::DML-Insert-sql[]
  INSERT INTO users
  SELECT ou.xt$id, ou.given_name AS first_name, ou.surname AS last_name,
         ou.xt$valid_from, ou.xt$valid_to
  FROM old_users AS ou
  -- end::DML-Insert-sql[]

DML-Delete-sql: |
  -- tag::DML-Delete-sql[]
  DELETE FROM comments WHERE comments.post_id = ?
  -- end::DML-Delete-sql[]

DML-Delete-additional-unify-clauses-sql: |
  -- tag::DML-Delete-additional-unify-clauses-sql[]
  DELETE FROM comments
  WHERE comments.post_id IN (SELECT posts.xt$id FROM posts WHERE posts.author_id = ?)
  -- end::DML-Delete-additional-unify-clauses-sql[]

DML-Delete-bitemporal-sql: |
  -- tag::DML-Delete-bitemporal-sql[]
  DELETE FROM promotions
  FOR PORTION OF VALID_TIME FROM DATE '2023-12-26' TO END_OF_TIME
  WHERE promotions.promotion_type = 'christmas'
  -- end::DML-Delete-bitemporal-sql[]

DML-Delete-everything-sql: |
  -- tag::DML-Delete-everything-sql[]
  DELETE FROM comments
  -- end::DML-Delete-everything-sql[]

DML-Update-sql: |
  -- tag::DML-Update-sql[]
  UPDATE documents
  SET version = documents.version + 1
  WHERE documents.xt$id = ?
  -- end::DML-Update-sql[]

DML-Update-bitemporal-sql-1: |
  -- tag::DML-Update-bitemporal-sql-1[]
  INSERT INTO comments (xt$id, post_id) VALUES (?, ?)
  -- end::DML-Update-bitemporal-sql-1[]
DML-Update-bitemporal-sql-2: |
  -- tag::DML-Update-bitemporal-sql-2[]
  UPDATE posts AS p
  SET comment_count = (SELECT COUNT(*) FROM comments WHERE comments.post_id = ?)
  WHERE p.post_id = ?
  -- end::DML-Update-bitemporal-sql-2[]

DML-Erase-sql: |
  -- tag::DML-Erase-sql[]
  ERASE FROM users WHERE users.email = 'jms@example.com'
  -- end::DML-Erase-sql[]

DML-Assert-sql: |
  -- tag::DML-Assert-sql[]
  ASSERT NOT EXISTS (SELECT 1 FROM users WHERE email = 'james@juxt.pro')
  -- end::DML-Assert-sql[]
